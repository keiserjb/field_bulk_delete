<?php
 /**
  @file
  Primary hook implementations for Field Bulk Delete.
 /

/**
 * Implements hook_help().
 */
function field_bulk_delete_help($path, $arg) {
 if ($path == 'admin/help#field_bulk_delete') {
    return '<p>' . t('The Metatag module provides a options to let each page have customized meta data added to the "meta" tags in the HEAD section of the document.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function field_bulk_delete_permission() {
  $permissions['administer field delete'] = array(
    'title' => t('Administer field delete'),
    'restrict access' => TRUE,
    'description' => t("Access to delete field's and field values."),
  );
  return $permissions;
}
/**
 * Implements hook_menu().
 */
function field_bulk_delete_menu() {

  $items = array();

  $items['admin/config/content/field_bulk_delete'] = array(
    'title' => 'Field Bulk Delete',
    'description' => 'Field Bulk Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_bulk_delete_admin'),
    'access arguments' => array('administer field_bulk_delete settings'),
    'type' => MENU_NORMAL_ITEM,
   );
   $items['admin/config/content/field_bulk_delete/tab1'] = array(
    'title' => 'Field Delete',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/config/content/field_bulk_delete/tab2'] = array(
    'title' => 'Field Data Delete',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('field_bulk_delete_admin'),
    'access arguments' => array('administer field_bulk_delete settings'),
  );

  return $items;

}
/**
 * Implements hook_form().
 */
function field_bulk_delete_admin($form, &$form_state) {
  $form = array();
  $selected = '';
  //$options = _get_node_type_list_options();
  $fields_info = field_info_instances('node');
  $entity_options = _get_entity_type_list_options();
  $entity_selected = isset($form_state['values']['entity_type']) ? $form_state['values']['entity_type'] : key($entity_options);
  $selected = isset($form_state['values']['node_type']) ? $form_state['values']['node_type'] : '_none';
 /* $form['delete'] = array(
    '#type' => 'select',
    '#title' => t('Select Function'),
    '#options'=> array('0'=>'Delete Field','1'=>'Delete Field Data'),   
    '#required' => TRUE,
  );*/
  $form['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Select Entity Type'),
    '#options'=> $entity_options,
    '#default_value' => $entity_selected,
    '#required' => TRUE,
    '#ajax' => array(     
      'callback' => 'entity_list_dependent_dropdown_callback',
      'wrapper' => 'dropdown-first-replace',
    ),
  );
  $form['node_type'] = array(
    '#type' => 'select',
    '#title' => t('Select Content Type'),
    '#options'=>  _get_node_type_list_options($entity_selected),
   // '#default_value' => $selected,
    '#required' => TRUE,
    '#prefix' => '<div id="dropdown-first-replace">',
    '#suffix' => '</div>',
    '#ajax' => array(     
      'callback' => 'field_list_dependent_dropdown_callback',
      'wrapper' => 'dropdown-second-replace',
    ),
  );
  $form['field_list'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Field List'),
    '#required' => TRUE,
    '#prefix' => '<div id="dropdown-second-replace">',
    '#suffix' => '</div>',
    '#options' => _field_list_dependent_options($entity_selected,$selected),
    //'#default_value' => isset($form_state['values']['field_list']) ? $form_state['values']['field_list'] : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function _get_entity_type_list_options() {
  $entity_types =field_info_bundles();
  $options = array('_none' =>'--Select--');
  foreach($entity_types as $key=>$value){	
  	$options[$key] = $key;
  }
  return $options;
}


function _get_node_type_list_options($entity_selected ='') {
	$entity_options = array();
	$entity_options = array('all' =>'All');
	if(!empty($entity_selected) && ($entity_selected != '_none')){
		$entity_types =field_info_bundles();
		 foreach($entity_types[$entity_selected] as $key=>$value){	
  			$entity_options[$key] = $value['label'];
  		}
	}
  return $entity_options;
}

function field_list_dependent_dropdown_callback($form, &$form_state) {
  return $form['field_list'];
}

function entity_list_dependent_dropdown_callback($form, &$form_state) {
 // return $form['node_type'];
   return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace("#dropdown-first-replace", render($form['node_type'])),
      ajax_command_replace("#dropdown-second-replace", render($form['field_list']))
    )
  );
}

function _field_list_dependent_options($entity_selected ='', $node_type = '') {
  $options = array();
  if(!empty($entity_selected) && ($entity_selected != '_none')){
  	$fields_info = field_info_instances($entity_selected);
  	if($node_type == 'all'){
  	  foreach($fields_info as $fields => $values){	 
		  foreach($values as $field=>$key){
		  	$options[$field] = $key['label'];
		  }
      } 
  	} else if($node_type != '_none') {
  		$fields_list = $fields_info[$node_type];
          foreach($fields_list as $fields => $values){
  	        $options[$fields] = $values['label'];
          }
  	 }
  }
  if (isset($options)) {
    return $options;
  }
  else {
    return array();
  }
}

function field_bulk_delete_admin_submit($form, &$form_state){
	//$delete_type = $form_state['values']['delete'];
	$entity_type = $form_state['values']['entity_type'];
	$node_type = $form_state['values']['node_type'];
	$field_list =  $form_state['values']['field_list'];
	//if($delete_type != 1){
	foreach($field_list as $field_name){
	  if($node_type != 'all') {
	  	if ($instance = field_info_instance($entity_type, $field_name, $node_type)) {
	  		//if($delete_type != 1){
         		field_delete_instance($instance);
       // } else{
        	//field_attach_delete($entity_type, $field_name);
       // }
        	
	  } else {
		field_delete_field($field_name);
		watchdog('field_bulk_delete', 'Deleted the :field_name field from all content type instances.', array(':field_name' => $field_name));	
	  }	
	}	 
	  field_purge_batch(count($field_list)); 
	} 	
 /*} else {
 	
		delete_field_values($entity_type, $entity, $field_list);
	}*/
}

function delete_field_values($entity_type, $entity, $fields){
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  foreach (field_info_instances($entity_type, $bundle) as $instance) {
    if (isset($fields [$instance ['field_id']])) {
      $field = field_info_field_by_id($instance ['field_id']);
      field_sql_storage_field_storage_purge($entity_type, $entity, $field, $instance);
    }
  }
}
